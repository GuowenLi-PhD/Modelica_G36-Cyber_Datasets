.. _SecGoal:

Goal 
====

Literature Review
------------------
Threat modeling is an effective way to generate bulk data containing a variety of threats with the ground truth under different operating conditions. It can also generate data for concurrent threats. Current efforts on threat modeling can be categorized into two types: modeling of passive threats and modeling of active threats. This is especially important for evaluating the robustness of fault detection and diagnosis (FDD) tools and conducting an impact analysis to understand the consequences of threats. It is more cost-effective and feasible to generate abnormal operating data using computer models than doing field experiments. 

The modeling of passive threats, in this report, refers to the process of modeling passive threats that are not injected by human beings to a normal system, such as cooling coil valve stuck, etc. Currently, a few works are available for the fault modeling of building energy especially HVAC system. Air handler units (AHUs), a critical HVAC equipment for conditioning and supplying air to the designated zones, were studied at a very early stage under the context of FDD. The American Society of Heating, Refrigerating and Air-Conditioning Engineersâ€™ (ASHRAE) research project RP-1312 has a specific goal of evaluating FDD tools for AHUs. A variety of fault-free and fault models (e.g., fan, valves, etc.) were developed in the HVACSIM+ platform and validated using experimental data in RP-1312 :cite:`RN8,RN9`. Yuill et al. :cite:`RN10` proposed a methodology of evaluating FDD protocols for an unitary air-conditioner by developing an FDD evaluator. Several existing fault models are developed and simulated to apply the faulty data to evaluate FDD algorithms. Cheung and Braun modeled the chiller fault models such as the refrigerant leaking, refrigerant overcharge, excess oil, non-condensable in refrigerant, condenser fouling and liquid line restriction, etc. :cite:`RN11,RN12`. The impact of some faults such as refrigerant overcharge on building energy consumption is numerically evaluated by integrating their fault models with a whole building simulation program of EnergyPlus :cite:`RN11`. Zhang and Hong :cite:`RN13` introduced and demonstrated the use of EnergyPlus fault objects to model and simulate various HVAC-related operational faults such as sensor faults, cooling coil fouling and dirty air filters, etc. However, the aforementioned tools for passive threat modelling still expose several limitations. First, it is difficult to model control-related faults, such as inappropriate PID parameters and communication delays, etc. Second, the injection of pressure-involved faults is not straightforward. For example, to model duct fouling, users need to adjust the pressure head, and minimum and maximum air flowrates in the fan model. 

Need add some sentences to describe the use of Modelica for fault simulation.

The modeling of active threats with human in the middle mainly focuses on cyber-attacks launched on the communication network of a cyber-physical system. Many researchers have identified and classified vulnerabilities in the BACnet protocol, including snooping, application service attack, network layer attack, network layer Denial of Service (DoS) and application layer DoS :cite:`RN14,RN15`. Researchers have implemented a range of attacks against BACnet using the detailed specific vulnerabilities in a number of simulated environments :cite:`RN16,RN17`. Bowers :cite:`RN18` outlined a range of attacks implemented as part of an automated attack framework implemented in Python. The Framework contained three categories (i.e., discovery, enumeration and fuzzing), which utilised legitimate BACnet commands. However, researchers often forgo directly implementing an attack, rather using a synthetic data manipulation for an out-of-bounds dataset generation and testing purposes :cite:`RN15,RN17`. Peacock identified a comprehensive list of known attacks that can be launched on a network-based control system, including DoS, flooding, smurfing, spoofing and writing attack, etc :cite:`RN6`. DoS attacks are perhaps the most detrimental one that affects the packet delivery because they have been proven capable of shutting an organization off from the Internet or dramatically slowing down network links :cite:`RN19`. The previously mentioned researches mainly focused on the attacks and their impacts on the cyber part of a communication network system.

In order to study the impact of cyber-attacks on a network-based control system, many researchers further detailed the attack models to quantify how the control performance or objectives are compromised in the threatened system. The literature generally considers the impact of cyber-attacks on the network system as signal corruption, signal delaying and signal blocking. Signal corruption refers to the manipulation of communicated data thorough remote attacks that can utilize the WriteProerty to corrupt the value of the payloads. Huang et al. :cite:`RN20` provided basic models for signal corruptions, such as max/min attack, scaling attack and additive attack, etc. Sridhar and Manimaran :cite:`RN21` extended the basic signal corruption patterns to include ramp attack, pulse attack and random attack. Signal delaying, which is typically a byproduct of DoS attacks on the network, refers to the delayed transmissions between controllers and the plant due to the unavailability of communication devices, communication paths or local plant devices. Long et al. :cite:`RN22` numerically evaluated the impact of signal delays on a control performance of a proportional integral controller and a second-order plant. Two DoS attacks are modeled: one is the attack on a local controller to cause a large number of packet losses, and the other is a remote attack through Internet on a service-provider-edge router to cause a long delay jitter. The authors used a lumped queue to model the end-to-end packet transmission between a plant and a controller. The attack is injected as a packet traffic flow at different nodes of the network, and the signal delay is evaluated in terms of impacts on the control performance. Soucek et al. :cite:`RN23` evaluated the effect of a delay jitter at a fixed mean delay on the quality of control. Two sources of the jitter delay are identified: network traffic-induced, and protocol-induced. The authors mentioned that because the sources of packet delay jitter and packet loss in general IP-based network-based control systems are very complex in nature and to some extent non-stationary, they only investigated the influence of the corresponding quality of service vectors that contain a deterministic minimum delay, a stochastic delay and a packet loss rate on the quality of control. Xin et al. :cite:`RN24` assessed the impact of a constant delay on the power grid frequency control. The delays are modeled together with a 37-bus electric grid system. Signal blocking is also considered as a consequence of DoS attacks in many research. Huang et al. :cite:`RN20` considered signal blocking as a consequence of DoS attack launched on a network-based control system. Sridhar and Manimaran in :cite:`RN25` also explored a DoS attack that blocks the actuators from receiving real-time control actions from the controller. 

Current Gaps
-------------
The existing threat modeling approaches for different HVAC components and systems promote the inclusions of threat simulations using existing building performance simulators such as EnergyPlus, TRNSYS, HVACSIM+, and Modelica etc. by either tweaking input variables in the normal model or introducing new faulty models.
The following gaps are identified from the above-mentioned threat modeling efforts:

    1. Each single building simulator has a limited threat modeling and simulation capacity. 
    EnergyPlus and Modelica has been identified as two advanced building simulators for threat modeling (Yanfei's review paper).
    However, the limitations in these two simulators can still be found.
    For EnergyPlus, first, it is difficult to model control-related faults, such as inappropriate PID parameters and communication delays etc. Second, the injection of pressure-involved faults is not straightforward. For example, to model duct fouling, users need to adjust the pressure head, minimum and maximum air flowrate in the fan model. Third, faults cannot be injected in the middle of simulation. Forth, extensive efforts need to be spent if the different threat temporal patterns need to be modeled.
    For Modelica, although more flexibility could be provided compared with EnergyPlus, current threat modeling efforts using Modelica barely consider Modelica parameter changes during simlation, such as modeling a gradually fouled cooling coil by changing its UA norminal value. 
    Modelica parameter is a type of variable that should not depend on time. Once compiled, a Modelica parameter typically is not changeable over time (although there are some workarounds).
    These parameters usually represent system sizing information and global controller settings in a Modelica model.
    What's more, more efforts are needed to extend Modelica-related models (i.e., Modelica Buildings library) to consider threats.

    2. There is barely a framework that considers both passive and active threats. 
    EnergyPlus mostly is used to support passive threats modeling and simulation due to its limitation of modeling controllers. 
    The large simulatin time step (at least 1 minute) and assumption of ideal controller make it insufficient to model and simulate control-related threats, especially short-term cyber-attacks launched on a network-based control system.

    3. There lacks a flexible and generic threat modeling and simulation framework.
    Current threat modeling and simulation efforts are mostly performed in a single simulator, which inherits the limited capacity of such a simulator.
    EnergyPlus provides limited support to inject threats at an arbitary location, from a random start time and for any threat durations.
    Although Modelica-based simulator can be flexible but the current research failed to present a more generic threat modeling framework based on Modelica.


Highlights
-----------
This paper presents a flexible and generic Python-based threat injection framework for a Modelica/FMU simulator. 
The proposed framework addresses the limitations of threat modeling in the Modelica-based simulator by providing a basic Modelica package to overwrite Modelica variables during simulation.
The similar idea can also be improved for a EnergyPlus/FMU or a TRNSYS/FMU simulator.

The goal of this library is to:

    1. Model and simulate both passive threats and active threats by leveraging the Modelica simulator. 
    
    2. Provide a flexible and generic Python-based threat-injection framework for FMU simulators.

    3. Demonstrate the threat-injection framework on a Modelica/FMU-based building energy and control system.
